{
  secretsFile,
  sopsFile,
  ageKeyFile,
  sopsConfigFile,
  rbwCommand,
  forceSync,
  workingDirectory
}:

''
#!/usr/bin/env bash
# sopswarden-sync - Sync secrets from Bitwarden to encrypted sops file
# Generated by sopswarden flake

set -euo pipefail

# Configuration
SECRETS_FILE="${secretsFile}"
SOPS_FILE="${sopsFile}"
AGE_KEY_FILE="${ageKeyFile}"
SOPS_CONFIG_FILE="${sopsConfigFile}"
RBW_COMMAND="${rbwCommand}"
FORCE_SYNC=''${FORCE_SYNC:-${if forceSync then "true" else "false"}}

# Working directory setup
${if workingDirectory != null then ''
WORK_DIR="${workingDirectory}"
cd "$WORK_DIR"
'' else ''
# Use directory containing secrets file as working directory
WORK_DIR="$(dirname "$(realpath "$SECRETS_FILE")")"
cd "$WORK_DIR"
''}

# Resolve relative paths from working directory
SECRETS_FILE="$(realpath "$SECRETS_FILE")"
SOPS_FILE="$(realpath "$SOPS_FILE")"
HASH_FILE="$(dirname "$SECRETS_FILE")/.last-sync-hash"

# Check if secrets.nix has changed since last sync
SECRETS_HASH=$(sha256sum "$SECRETS_FILE" 2>/dev/null | cut -d' ' -f1 || echo "no-hash")

if [ "$FORCE_SYNC" != "true" ] && [ -f "$HASH_FILE" ] && [ "$(cat "$HASH_FILE")" = "$SECRETS_HASH" ]; then
    echo "✅ secrets.nix unchanged since last sync, skipping..."
    echo "💡 Use FORCE_SYNC=true to force a sync anyway"
    exit 0
fi

# Check dependencies
check_dependency() {
    if ! command -v "$1" &> /dev/null; then
        echo "Error: $1 is not installed. Please install it first."
        exit 1
    fi
}

check_dependency "${builtins.baseNameOf rbwCommand}"
check_dependency "sops"
check_dependency "age"
check_dependency "jq"
check_dependency "nix"

# Test rbw authentication with graceful error handling
if ! $RBW_COMMAND ls &> /dev/null; then
    echo "❌ Error: rbw is not authenticated or vault is locked."
    echo "🔓 Please run '$RBW_COMMAND unlock' first."
    echo "💡 If using a self-hosted server, make sure rbw is configured:"
    echo "   rbw config set base_url https://your-server.com"
    echo "   rbw config set email your-email@example.com"
    exit 1
fi

echo "🔄 Syncing secrets from Bitwarden..."

# Read secrets.nix and extract secret definitions using nix
secret_keys=$(nix eval --impure --raw --expr "
  let secrets = (import $SECRETS_FILE).secrets; 
  in builtins.concatStringsSep \" \" (builtins.attrNames secrets)")

if [ -z "$secret_keys" ]; then
    echo "⚠️  No secrets found in $SECRETS_FILE"
    exit 1
fi

# Create temporary unencrypted YAML
temp_file=$(mktemp)
echo "# Auto-generated by sopswarden - $(date)" > "$temp_file"
echo "# Source: $SECRETS_FILE" >> "$temp_file"

for key in $secret_keys; do
    echo "📡 Fetching: $key"
    
    # Get the secret definition (either string or attrset)
    secret_def=$(nix eval --impure --raw --expr "
        let 
          secrets = (import $SECRETS_FILE).secrets;
          def = secrets.$key;
        in 
          if builtins.isString def then 
            builtins.toJSON { name = def; user = null; type = \"login\"; field = \"password\"; }
          else 
            builtins.toJSON (def // { type = def.type or \"login\"; field = def.field or \"password\"; })")
    
    # Parse the JSON to get all fields
    name=$(echo "$secret_def" | jq -r '.name')
    user=$(echo "$secret_def" | jq -r '.user // empty')
    item_type=$(echo "$secret_def" | jq -r '.type // "login"')
    field=$(echo "$secret_def" | jq -r '.field // "password"')
    
    # Fetch from bitwarden based on type
    if [ "$item_type" = "note" ]; then
        # For secure notes, use --field to get specific field
        if ! secret_value=$($RBW_COMMAND get "$name" --field "$field" 2>/dev/null); then
            echo "❌ Failed to fetch note '$name' field '$field'"
            exit 1
        fi
    elif [ -n "$user" ]; then
        # For login items with specific user
        if [ "$field" = "password" ]; then
            if ! secret_value=$($RBW_COMMAND get "$name" "$user" 2>/dev/null); then
                echo "❌ Failed to fetch login '$name' for user '$user'"
                exit 1
            fi
        else
            if ! secret_value=$($RBW_COMMAND get "$name" "$user" --field "$field" 2>/dev/null); then
                echo "❌ Failed to fetch login '$name' field '$field' for user '$user'"
                exit 1
            fi
        fi
    else
        # For login items without specific user
        if [ "$field" = "password" ]; then
            if ! secret_value=$($RBW_COMMAND get "$name" 2>/dev/null); then
                echo "❌ Failed to fetch login '$name'"
                exit 1
            fi
        else
            if ! secret_value=$($RBW_COMMAND get "$name" --field "$field" 2>/dev/null); then
                echo "❌ Failed to fetch login '$name' field '$field'"
                exit 1
            fi
        fi
    fi
    
    # Add to YAML (properly escape for YAML)
    escaped_value=$(echo "$secret_value" | sed 's/"/\\"/g')
    echo "$key: \"$escaped_value\"" >> "$temp_file"
done

# Encrypt with sops
if [ -f "$SOPS_FILE" ]; then
    echo "🔒 Updating existing encrypted secrets file..."
else
    echo "🔒 Creating new encrypted secrets file..."
fi

# Make sure we're in the directory with .sops.yaml for encryption
SOPS_CONFIG_DIR="$(dirname "$(realpath "$SOPS_CONFIG_FILE")")"
temp_yaml="$SOPS_CONFIG_DIR/temp_secrets.yaml"

# Copy temp file to sops config directory
cp "$temp_file" "$temp_yaml"
rm "$temp_file"

# Change to sops config directory and encrypt
cd "$SOPS_CONFIG_DIR"
if ! sops --encrypt "$(basename "$temp_yaml")" > "$(basename "$SOPS_FILE")"; then
    echo "❌ Failed to encrypt secrets with sops"
    rm "$(basename "$temp_yaml")" 2>/dev/null || true
    exit 1
fi
rm "$(basename "$temp_yaml")"

# Update the hash file to track this sync
echo "$SECRETS_HASH" > "$HASH_FILE"

echo "✅ Secrets synced successfully to $SOPS_FILE"
echo "📝 Encrypted $(echo "$secret_keys" | wc -w) secrets from Bitwarden"
echo "💡 Remember to commit the updated secrets file to your repository"
''