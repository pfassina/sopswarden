{
  secrets,
  sopsFile,
  ageKeyFile,
  sopsConfigFile,
  rbwCommand,
  forceSync,
  normalizeSecretDef,
  lib,
}:
''
  #!/usr/bin/env bash
  # sopswarden-sync - Sync secrets from Bitwarden to encrypted sops file
  # Generated by sopswarden flake

  set -euo pipefail

  # Configuration
  SOPS_FILE="${sopsFile}"
  AGE_KEY_FILE="${ageKeyFile}"
  SOPS_CONFIG_FILE="${sopsConfigFile}"
  RBW_COMMAND="${rbwCommand}"
  FORCE_SYNC=''${FORCE_SYNC:-${
    if forceSync
    then "true"
    else "false"
  }}

  # Set working directory to current location
  WORK_DIR="$(pwd)"

  # Handle SOPS_FILE path resolution
  if [[ "$SOPS_FILE" == /nix/store/* ]]; then
      # Nix store path: extract filename and write to working directory
      nix_filename="$(basename "$SOPS_FILE")"
      actual_filename="''${nix_filename#*-}"  # Remove everything up to and including first dash
      SOPS_FILE="$WORK_DIR/$actual_filename"
      echo "🔧 Detected Nix store path, writing to: $SOPS_FILE"
  elif [[ "$SOPS_FILE" == ./* ]]; then
      # Relative path: resolve to absolute path from working directory
      SOPS_FILE="$WORK_DIR/$SOPS_FILE"
      echo "🔧 Resolved relative path to: $SOPS_FILE"
  elif [[ "$SOPS_FILE" != /* ]]; then
      # Not absolute path: treat as relative to working directory
      SOPS_FILE="$WORK_DIR/$SOPS_FILE"
      echo "🔧 Resolved relative path to: $SOPS_FILE"
  fi
  
  # Ensure parent directory exists
  SOPS_DIR="$(dirname "$SOPS_FILE")"
  if [[ ! -d "$SOPS_DIR" ]]; then
      echo "📁 Creating directory: $SOPS_DIR"
      mkdir -p "$SOPS_DIR"
  fi

  # Handle SOPS_CONFIG_FILE path resolution  
  if [[ "$SOPS_CONFIG_FILE" == ./* ]]; then
      # Relative path: resolve to absolute path from working directory
      SOPS_CONFIG_FILE="$WORK_DIR/$SOPS_CONFIG_FILE"
      echo "🔧 Resolved SOPS config relative path to: $SOPS_CONFIG_FILE"
  elif [[ "$SOPS_CONFIG_FILE" != /* ]]; then
      # Not absolute path: treat as relative to working directory
      SOPS_CONFIG_FILE="$WORK_DIR/$SOPS_CONFIG_FILE"
      echo "🔧 Resolved SOPS config relative path to: $SOPS_CONFIG_FILE"
  fi

  # Check dependencies
  check_dependency() {
      if ! command -v "$1" &> /dev/null; then
          echo "Error: $1 is not installed. Please install it first."
          exit 1
      fi
  }

  check_dependency "${builtins.baseNameOf rbwCommand}"
  check_dependency "sops"
  check_dependency "age"

  # Test rbw authentication with graceful error handling
  if ! $RBW_COMMAND ls &> /dev/null; then
      echo "❌ Error: rbw is not authenticated or vault is locked."
      echo "🔓 Please run '$RBW_COMMAND unlock' first."
      echo "💡 If using a self-hosted server, make sure rbw is configured:"
      echo "   rbw config set base_url https://your-server.com"
      echo "   rbw config set email your-email@example.com"
      exit 1
  fi

  echo "🔄 Syncing secrets from Bitwarden..."

  # Secrets are embedded directly in the script (no file dependencies!)
  ${
    let
      secretNames = builtins.attrNames secrets;
    in
    if builtins.length secretNames == 0 then ''
      echo "⚠️  No secrets configured in sopswarden"
      exit 1
    '' else ''
      secret_keys="${builtins.concatStringsSep " " secretNames}"
    ''
  }

  # Create temporary unencrypted YAML
  temp_file=$(mktemp)
  echo "# Auto-generated by sopswarden - $(date)" > "$temp_file"
  echo "# Source: direct configuration" >> "$temp_file"

  # Initialize counters for reporting
  successful_secrets=0
  failed_secrets=0

  ${
    let
      generateSecretProcessing = secretName: secretDef:
        let
          normalized = normalizeSecretDef secretDef;
          name = normalized.name;
          user = if normalized.user == null then "" else normalized.user;
          itemType = normalized.type;
          field = normalized.field;
        in ''
          # Process secret: ${secretName}
          echo "📡 Fetching: ${secretName}"
          
          # Fetch from bitwarden with graceful degradation
          secret_value=""
          ${if itemType == "note" then ''
            # For secure notes, use --field to get specific field
            if secret_value=$($RBW_COMMAND get "${name}" --field "${field}" 2>/dev/null); then
                successful_secrets=$((successful_secrets + 1))
            else
                echo "⚠️  Warning: Failed to fetch note '${name}' field '${field}' - skipping"
                failed_secrets=$((failed_secrets + 1))
                secret_value=""
            fi
          '' else if user != "" then ''
            # For login items with specific user
            ${if field == "password" then ''
              if secret_value=$($RBW_COMMAND get "${name}" "${user}" 2>/dev/null); then
                  successful_secrets=$((successful_secrets + 1))
              else
                  echo "⚠️  Warning: Failed to fetch login '${name}' for user '${user}' - skipping"
                  failed_secrets=$((failed_secrets + 1))
                  secret_value=""
              fi
            '' else ''
              if secret_value=$($RBW_COMMAND get "${name}" "${user}" --field "${field}" 2>/dev/null); then
                  successful_secrets=$((successful_secrets + 1))
              else
                  echo "⚠️  Warning: Failed to fetch login '${name}' field '${field}' for user '${user}' - skipping"
                  failed_secrets=$((failed_secrets + 1))
                  secret_value=""
              fi
            ''}
          '' else ''
            # For login items without specific user
            ${if field == "password" then ''
              if secret_value=$($RBW_COMMAND get "${name}" 2>/dev/null); then
                  successful_secrets=$((successful_secrets + 1))
              else
                  echo "⚠️  Warning: Failed to fetch login '${name}' - skipping"
                  failed_secrets=$((failed_secrets + 1))
                  secret_value=""
              fi
            '' else ''
              if secret_value=$($RBW_COMMAND get "${name}" --field "${field}" 2>/dev/null); then
                  successful_secrets=$((successful_secrets + 1))
              else
                  echo "⚠️  Warning: Failed to fetch login '${name}' field '${field}' - skipping"
                  failed_secrets=$((failed_secrets + 1))
                  secret_value=""
              fi
            ''}
          ''}
          
          # Add to YAML if fetch was successful
          if [ -n "$secret_value" ]; then
              escaped_value=$(echo "$secret_value" | sed 's/"/\\"/g')
              echo "${secretName}: \"$escaped_value\"" >> "$temp_file"
          fi
        '';
    in
    builtins.concatStringsSep "\n" (
      lib.mapAttrsToList generateSecretProcessing secrets
    )
  }


  # Encrypt with sops
  if [ -f "$SOPS_FILE" ]; then
      echo "🔒 Updating existing encrypted secrets file..."
  else
      echo "🔒 Creating new encrypted secrets file..."
  fi

  # Create temporary directory for encryption to avoid Nix store write issues
  TEMP_DIR=$(mktemp -d)
  temp_yaml="$TEMP_DIR/secrets.yaml"
  cleanup() {
      rm -rf "$TEMP_DIR"
  }
  trap cleanup EXIT

  # Copy temp file and sops config to temporary directory
  cp "$temp_file" "$temp_yaml"
  cp "$SOPS_CONFIG_FILE" "$TEMP_DIR/.sops.yaml"
  rm "$temp_file"

  # Change to temporary directory and encrypt
  cd "$TEMP_DIR"
  if ! sops --config .sops.yaml --encrypt secrets.yaml > "$SOPS_FILE"; then
      echo "❌ Failed to encrypt secrets with sops"
      exit 1
  fi

  echo "✅ Secrets synced successfully to $SOPS_FILE"
  echo "📝 Successfully encrypted $successful_secrets secrets from Bitwarden"
  
  if [ "$failed_secrets" -gt 0 ]; then
      echo "⚠️  $failed_secrets secrets could not be retrieved from Bitwarden"
      echo "💡 Please check your Bitwarden vault and ensure all secrets exist"
  fi
  
  echo "💡 Remember to commit the updated secrets file to your repository"
''
