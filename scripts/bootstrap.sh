#!/usr/bin/env bash
# sopswarden-bootstrap - Generate encrypted secrets file from Bitwarden
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SECRETS_DIR="secrets"
SECRETS_FILE="$SECRETS_DIR/bitwarden.yaml"
SOPS_CONFIG_FILE=".sops.yaml"
AGE_KEY_FILE="$HOME/.config/sops/age/keys.txt"
FORCE_REBUILD=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --force)
            FORCE_REBUILD=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [--force]"
            echo "  --force    Rebuild secrets file even if it already exists"
            echo "  --help     Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option $1"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}üöÄ sopswarden bootstrap - Setting up encrypted secrets${NC}"

# Step 1: Ensure age key exists
echo -e "\n${YELLOW}üîë Checking age key...${NC}"
if [[ ! -f "$AGE_KEY_FILE" ]]; then
    echo "Generating age key for SOPS..."
    mkdir -p "$(dirname "$AGE_KEY_FILE")"
    age-keygen -o "$AGE_KEY_FILE"
    echo -e "${GREEN}‚úÖ Age key generated at $AGE_KEY_FILE${NC}"
else
    echo -e "${GREEN}‚úÖ Age key found at $AGE_KEY_FILE${NC}"
fi

# Step 2: Verify rbw is unlocked
echo -e "\n${YELLOW}üîì Checking Bitwarden authentication...${NC}"
if ! rbw status --quiet; then
    echo -e "${RED}‚ùå Bitwarden vault is locked${NC}"
    echo -e "${YELLOW}üí° Please run 'rbw unlock' first${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Bitwarden vault is unlocked${NC}"

# Step 3: Check if secrets file already exists
if [[ -f "$SECRETS_FILE" ]] && [[ "$FORCE_REBUILD" != "true" ]]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è  Secrets file already exists: $SECRETS_FILE${NC}"
    echo -e "${YELLOW}üí° Use --force to rebuild it${NC}"
    exit 0
fi

# Step 4: Gather secrets list from Nix configuration
echo -e "\n${YELLOW}üìã Gathering secrets from Nix configuration...${NC}"

# Try to evaluate the secrets from the current flake
if ! SECRETS_JSON=$(nix eval --json --no-warn-dirty .#nixosConfigurations.${HOSTNAME:-example}.config.services.sopswarden.secrets 2>/dev/null); then
    # Fallback: try common configuration names
    for config_name in example basic advanced; do
        if SECRETS_JSON=$(nix eval --json --no-warn-dirty .#nixosConfigurations.$config_name.config.services.sopswarden.secrets 2>/dev/null); then
            break
        fi
    done
fi

if [[ -z "${SECRETS_JSON:-}" ]] || [[ "$SECRETS_JSON" == "{}" ]]; then
    echo -e "${RED}‚ùå No sopswarden secrets found in configuration${NC}"
    echo -e "${YELLOW}üí° Make sure you have services.sopswarden.secrets defined${NC}"
    exit 1
fi

# Parse secrets using jq
SECRET_NAMES=($(echo "$SECRETS_JSON" | jq -r 'keys[]'))
echo -e "${GREEN}‚úÖ Found ${#SECRET_NAMES[@]} secrets to sync${NC}"

# Step 5: Create secrets directory and .sops.yaml if needed
mkdir -p "$SECRETS_DIR"

if [[ ! -f "$SOPS_CONFIG_FILE" ]]; then
    echo -e "\n${YELLOW}üìù Creating .sops.yaml configuration...${NC}"
    AGE_PUBLIC_KEY=$(age-keygen -y "$AGE_KEY_FILE")
    cat > "$SOPS_CONFIG_FILE" << EOF
keys:
  - &age_key $AGE_PUBLIC_KEY

creation_rules:
  - path_regex: secrets/.*\.yaml$
    age: *age_key
EOF
    echo -e "${GREEN}‚úÖ Created $SOPS_CONFIG_FILE${NC}"
fi

# Step 6: Fetch secrets from Bitwarden and build YAML
echo -e "\n${YELLOW}üîÑ Fetching secrets from Bitwarden...${NC}"

# Create temporary unencrypted YAML
TEMP_YAML=$(mktemp)
trap "rm -f $TEMP_YAML" EXIT

echo "# Auto-generated by sopswarden-bootstrap - $(date)" > "$TEMP_YAML"
echo "# Source: Bitwarden via rbw" >> "$TEMP_YAML"

SUCCESSFUL_SECRETS=0
FAILED_SECRETS=0

for secret_name in "${SECRET_NAMES[@]}"; do
    echo -e "${BLUE}üì° Fetching: $secret_name${NC}"
    
    # Get secret definition from JSON
    SECRET_DEF=$(echo "$SECRETS_JSON" | jq -r --arg name "$secret_name" '.[$name]')
    
    # Parse secret definition (handle both string and object forms)
    if [[ "$SECRET_DEF" == "\"*" ]]; then
        # Simple string form: "Item Name"
        ITEM_NAME=$(echo "$SECRET_DEF" | jq -r '.')
        FIELD="password"
        USER=""
        TYPE="login"
    else
        # Complex object form
        ITEM_NAME=$(echo "$SECRET_DEF" | jq -r '.name // .item // empty')
        FIELD=$(echo "$SECRET_DEF" | jq -r '.field // "password"')
        USER=$(echo "$SECRET_DEF" | jq -r '.user // empty')
        TYPE=$(echo "$SECRET_DEF" | jq -r '.type // "login"')
    fi
    
    # Fetch from Bitwarden
    SECRET_VALUE=""
    if [[ "$TYPE" == "note" ]]; then
        # For secure notes, use --field to get specific field
        if SECRET_VALUE=$(rbw get "$ITEM_NAME" --field "$FIELD" 2>/dev/null); then
            ((SUCCESSFUL_SECRETS++))
        else
            echo -e "${RED}‚ö†Ô∏è  Warning: Failed to fetch note '$ITEM_NAME' field '$FIELD'${NC}"
            ((FAILED_SECRETS++))
            continue
        fi
    elif [[ -n "$USER" ]]; then
        # For login items with specific user
        if [[ "$FIELD" == "password" ]]; then
            if SECRET_VALUE=$(rbw get "$ITEM_NAME" "$USER" 2>/dev/null); then
                ((SUCCESSFUL_SECRETS++))
            else
                echo -e "${RED}‚ö†Ô∏è  Warning: Failed to fetch login '$ITEM_NAME' for user '$USER'${NC}"
                ((FAILED_SECRETS++))
                continue
            fi
        else
            if SECRET_VALUE=$(rbw get "$ITEM_NAME" "$USER" --field "$FIELD" 2>/dev/null); then
                ((SUCCESSFUL_SECRETS++))
            else
                echo -e "${RED}‚ö†Ô∏è  Warning: Failed to fetch login '$ITEM_NAME' field '$FIELD' for user '$USER'${NC}"
                ((FAILED_SECRETS++))
                continue
            fi
        fi
    else
        # For login items without specific user
        if [[ "$FIELD" == "password" ]]; then
            if SECRET_VALUE=$(rbw get "$ITEM_NAME" 2>/dev/null); then
                ((SUCCESSFUL_SECRETS++))
            else
                echo -e "${RED}‚ö†Ô∏è  Warning: Failed to fetch login '$ITEM_NAME'${NC}"
                ((FAILED_SECRETS++))
                continue
            fi
        else
            if SECRET_VALUE=$(rbw get "$ITEM_NAME" --field "$FIELD" 2>/dev/null); then
                ((SUCCESSFUL_SECRETS++))
            else
                echo -e "${RED}‚ö†Ô∏è  Warning: Failed to fetch login '$ITEM_NAME' field '$FIELD'${NC}"
                ((FAILED_SECRETS++))
                continue
            fi
        fi
    fi
    
    # Add to YAML with proper escaping
    ESCAPED_VALUE=$(echo "$SECRET_VALUE" | sed 's/"/\\"/g')
    echo "$secret_name: \"$ESCAPED_VALUE\"" >> "$TEMP_YAML"
done

if [[ $SUCCESSFUL_SECRETS -eq 0 ]]; then
    echo -e "${RED}‚ùå No secrets were successfully fetched${NC}"
    exit 1
fi

# Step 7: Encrypt with SOPS
echo -e "\n${YELLOW}üîí Encrypting secrets with SOPS...${NC}"
if ! sops --config "$SOPS_CONFIG_FILE" --encrypt "$TEMP_YAML" > "$SECRETS_FILE"; then
    echo -e "${RED}‚ùå Failed to encrypt secrets with SOPS${NC}"
    exit 1
fi

# Step 8: Success message
echo -e "\n${GREEN}‚úÖ Bootstrap complete!${NC}"
echo -e "${GREEN}üìù Encrypted $SUCCESSFUL_SECRETS secrets ‚Üí $SECRETS_FILE${NC}"

if [[ $FAILED_SECRETS -gt 0 ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $FAILED_SECRETS secrets could not be retrieved from Bitwarden${NC}"
    echo -e "${YELLOW}üí° Please check your Bitwarden vault${NC}"
fi

echo -e "\n${BLUE}üéâ Next steps:${NC}"
echo -e "  1. Commit the encrypted file: ${YELLOW}git add $SECRETS_FILE $SOPS_CONFIG_FILE${NC}"
echo -e "  2. Build your system: ${YELLOW}sudo nixos-rebuild switch${NC}"
echo -e "\n${GREEN}Secrets will stay updated automatically via sopswarden-sync service!${NC}"